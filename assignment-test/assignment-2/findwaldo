#!/bin/bash
# uncomment next line to get trace debug output
#set -x
# uncomment next line to have script stop if a command returns a failing exit status
#set -e

# assign a variable named pgm the expanded value of the first postional argument to the script
pgm=$1

# test -z returns true if the next work is of zero length.  This would happen if the
# pgm variable was empty because $1 did not expand to any string (aka no argument was given)
if [[ -z $pgm ]]; then
    echo "USAGE: $0 <puzzlepgm>" > /dev/stderr
    exit -1
fi

# check to make sure the puzzle program specifed is executable
if [[ ! -x $pgm ]]; then
   echo "ERROR: Cannot execute $pgm" > /dev/stderr
   exit -1
fi

# for loop that will increment a shell variable i by one on each interaction
#  ((expr)) is shell arithmetic expansion
for ((i=0; i<100; i++)); do
    # Cleanup
    # if there is a PuzzleDir from a prior run remove it
    [[ -d PuzzleDir ]] && rm -rf PuzzleDir
    
    # if we have saved stdout from a prior run remove it
    [[ -a stdout ]] && rm stdout

    # if we have saved stderr from a prior run remove it
    [[ -a stderr ]] && rm stderr

    # Run the puzzle program
    #   redirect standard output to a file called stdout
    #   redirect standard error to a file called stderr
    if ./$pgm $i > stdout 2> stderr; then
	# if it returns success then there are waldos in its outputs

	# below we set a shell variables to the output of a pipeline using the var=$(cmd) syntax
	# where var is the name of a variable
	# and $(cmd) triggers command substitution
	#    the specified command, in our case a pipeline, is run and its standard output
	#    is substituted as the value for the assignment         
    
	# search lines written to standard output stream
	#  use grep to filter lines with waldo and wc to count the filtered lines
	#    grep : -i ignore's case so any form of waldo on a line will match
	#    wc -l : -l counts lines only (not words or chacters)
	waldoStdoutCount=$(grep -i waldo stdout | wc -l)

	# search line wreitten to standard error stream
	#   similar to above but search the stderr output
	waldoStderrCount=$(grep -i waldo stderr | wc -l)

	# search all the file in the PuzzleDirectory for waldo lines
	#   grep: -R searches recursively all the files in all subdirectories of the PuzzleDir
	#         -i as before use -i to ignore case so that all version of waldo will match
	#   wc: -l as before use -l to count the output of grep lines
	waldoFileLinesCount=$(grep -R -i waldo PuzzleDir | wc -l)

	# check for a waldo file
	# find: find with no additional arguments will print the names of all files and directories
	#       below the specified directory
	# grep -i: use grep again to filter out lines that have waldo on it ignoring case
	#          (in this case file names)
	# wc -l: finally use wc to count matching lines
	waldoFilesCount=$(find PuzzleDir | grep -i waldo | wc -l)
	
	# print results
	#   use variable expansion to print results
	echo "$pgm $i $waldoStdoutCount $waldoStderrCount $waldoFileLinesCount $waldoFilesCount"
    fi
done
